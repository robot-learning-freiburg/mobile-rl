<launch>

  <arg name="robot_name" default="hsrb" />
<!--  <arg name="upload_robot_model_launch" default="$(find hsrb_description)/robots/upload_hsrb.launch" />-->
<!--  <include file="$(find hsrb_moveit_config)/launch/planning_context.launch" >-->
<!--    <arg name="robot_name" value="$(arg robot_name)" />-->
<!--    <arg name="upload_robot_model_launch" value="$(arg upload_robot_model_launch)" />-->
<!--  </include>-->
<!--  <param name="/robot_description_semantic" textfile="$(find modulation_rl)/gazebo_world/hsr/robot/hsrb.srdf" />-->
  <!--  <group ns="/robot_description_kinematics">-->
  <!--    <rosparam command="load" file="$(find modulation_rl)/gazebo_world/hsr/configs/kinematics.yaml"/>-->
  <!--    <rosparam param="robot_name" subst_value="true">"hsrb"</rosparam>-->
  <!--  </group>-->

  <!-- By default we do not overwrite the URDF. Change the following to true to change the default behavior -->
<!--  <arg name="load_robot_description" default="false"/>-->
  <!-- The name of the parameter under which the URDF is loaded -->
  <arg name="robot_description" default="robot_description"/>
<!--  <arg name="upload_robot_model_launch" default="$(find hsrb_description)/robots/upload_hsrb.launch"/>-->
  <!-- Load universal robot description format (URDF) -->
<!--  <include if="$(arg load_robot_description)" file="$(arg upload_robot_model_launch)" >-->
<!--    <remap to="$(arg robot_description)" from="/robot_description" />-->
<!--  </include>-->
  <!-- The semantic description that corresponds to the URDF -->
<!--  <param name="$(arg robot_description)_semantic" textfile="$(find hsrb_moveit_config)/config/hsrb.srdf" />-->
  <param name="$(arg robot_description)_semantic" textfile="$(find modulation_rl)/gazebo_world/hsr/robot/hsrb.srdf" />
  <!-- Load updated joint limits (override information from URDF) -->
  <group ns="$(arg robot_description)_planning">
    <rosparam command="load" file="$(find hsrb_moveit_config)/config/joint_limits.yaml"/>
  </group>
  <!-- Load default settings for kinematics; these settings are overridden by settings in a node's namespace -->
  <group ns="$(arg robot_description)_kinematics">
<!--    <rosparam command="load" file="$(find hsrb_moveit_config)/config/kinematics.yaml"/>-->
    <rosparam command="load" file="$(find modulation_rl)/gazebo_world/hsr/configs/kinematics.yaml"/>
    <rosparam param="robot_name" subst_value="true">$(arg robot_name)</rosparam>
  </group>

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />  
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/> 
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>
  <arg name="moveit_octomap_sensor_params_file" default="$(find hsrb_moveit_config)/config/sensors_xtion.yaml" />
  <arg name="joint_states_topic" default="joint_states" />

  <!-- Planning Functionality -->
  <include ns="move_group" file="$(find hsrb_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="ompl" />
  </include>

  <!-- Trajectory Execution Functionality -->
  <include ns="move_group" file="$(find hsrb_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="hsrb" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
  </include>

  <!-- Sensors Functionality -->
<!--   <include ns="move_group" file="$(find hsrb_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)"> -->
<!--     <arg name="moveit_sensor_manager" value="hsrb" /> -->
<!--     <arg name="moveit_octomap_sensor_params_file" value="$(arg moveit_octomap_sensor_params_file)"/> -->
<!--   </include> -->

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
    <param name="default_workspace_bounds" value="2.0" />

    <!-- MoveGroup capabilities to load -->
    <param name="capabilities" value="move_group/MoveGroupKinematicsService
				      move_group/MoveGroupMoveAction
				      move_group/MoveGroupStateValidationService
				      move_group/MoveGroupGetPlanningSceneService
				      " />
<!--                       move_group/MoveGroupCartesianPathService -->
<!-- 				      move_group/MoveGroupPickPlaceAction -->
<!-- 				      move_group/MoveGroupPlanService -->
<!-- 				      move_group/MoveGroupQueryPlannersService -->
    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="false" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />

    <!-- Remap joint_states -->
    <remap from="joint_states" to="$(arg joint_states_topic)" />
  </node>
  
</launch>
